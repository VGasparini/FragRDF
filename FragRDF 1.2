import rdflib
from rdflib import *
import xml.etree.ElementTree as ET
from pprint import *

def template_reader(path):
	tree = ET.parse(path)
	root = tree.getroot()

	name,template = [],[]
	data1,data = [],[[],[],[],[],[],[]]

	for item in root.iter('item'):
		data1.append(list(item.attrib.items()))
	entity = [[] for x in range(6)]
	name = [[] for x in range(6)]
	for i in range(len(data1)):
		entity[int(data1[i][2][1][1:])-1].append(data1[i][3][1])
		name[int(data1[i][2][1][1:])-1].append(data1[i][1][1])
		#if(not any(t == data1[i][1][1] for t in name)):
		#	name.append(data1[i][1][1])
		#if(not any(t == data1[i][3][1] for t in entity)):
		#	entity[int(data1[i][2][1][1:])-1].append(data1[i][3][1])
		if(not any(t == (int(data1[i][2][1][1:])-1) for t in template)):
			template.append(int(data1[i][2][1][1:])-1)
	# Var -> data[template_index][object,predicate]
	return entity,name,template

base_path = 'dataset.nt'
schema_path = 'configurefrag.xml'

g = rdflib.Graph()
g.load(base_path,format='nt')
entity,name,template_index = template_reader(schema_path)

tmp = []

for t in range(len(template_index)):
	for s,p,o in g.triples((None,RDF.type,None)):
		for j,k,l in g.triples((s,None,None)):
			if k in entity:
				for i in g.triples((None,k,None)):
					print ('<'+i[0]+'> <'+i[1]+'> <'+i[2]+'>')
